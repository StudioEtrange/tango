version: '3.5'

networks:
  default:
    name: ${TANGO_CTX_NETWORK_NAME}

volumes:
  # volumes specific for each ctx
  artefact:
    name: ${TANGO_CTX_NAME}_artefact
  data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CTX_DATA_PATH}
    name: ${TANGO_CTX_NAME}_data
  plugins_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PLUGINS_DATA_PATH}
    name: ${TANGO_CTX_NAME}_plugins_data
  # volumes that can be shared between each ctx
  letsencrypt:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LETS_ENCRYPT_DATA_PATH}
    name: ${TANGO_INSTANCE_NAME}_letsencrypt
  traefikconfig:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${TRAEFIK_CONFIG_DATA_PATH}
    name: ${TANGO_INSTANCE_NAME}_traefikconfig
  traefiklog:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${TRAEFIK_LOG_PATH}
    name: ${TANGO_INSTANCE_NAME}_traefiklog
# See detail variable here : https://github.com/StudioEtrange/openvpn-client
# NOTE : cap_add, security_opt are required for this image to function
x-vpn: &default-vpn
  image: studioetrange/openvpn-client:dev
  # need root to launch openvpn-client
  user: 0:0
  depends_on: 
    - service_init
  restart: unless-stopped
  # allow host net stack management
  cap_add:
    - NET_ADMIN
  # disable all SELinux policies 
  security_opt:
    - label:disable
  devices:
    - /dev/net/tun
  env_file:
    - ${GENERATED_ENV_FILE_FOR_COMPOSE}
  environment:
    # forbid any output network trafic outside VPN - usefull when VPN do not want to connect
    - FIREWALL=1
    # group id that will own openvpn-client process AND that can bypass any firewall rule
    - GROUPID=33333
    # https://serverfault.com/a/1029470 redirect-gateway add default route
    - 'OTHER_ARGS=--redirect-gateway def1'
  labels:
    - "${TANGO_INSTANCE_NAME}.managed=true"
  networks:
    - default
  build:
    context: https://github.com/StudioEtrange/openvpn-client.git#dev


services:

  # Launch all services
  tango:
    image: ${TANGO_SHELL_IMAGE}
    container_name: ${TANGO_CTX_NAME}
    user: ${TANGO_USER_ID:-0}:${TANGO_GROUP_ID:-0}
    env_file:
      - ${GENERATED_ENV_FILE_FOR_COMPOSE}
    depends_on:
      - service_info
    networks:
      - default
    command: >
      bash -c "echo Hello ${TANGO_CTX_NAME}."

  # do some init on internal volume
  # populate artefact named volume with a foo file because when mounting an empty named volume on {$TANGO_ARTEFACT_MOUNT_POINT}, it might get existing content if TANGO_ARTEFACT_MOUNT_POINT have content on host (i.e : cdrom, floppy, usb... for /media)
  volume_init:
    image: ${TANGO_SHELL_IMAGE}
    container_name: ${TANGO_INSTANCE_NAME}_volume_init
    user: root
    env_file:
      - ${GENERATED_ENV_FILE_FOR_COMPOSE}
    volumes:
      - artefact:/foo
    networks:
      - default
    command: >
      bash -c "touch /foo/.tango"  
      
  # init service
  # TODO : useless service ?
  service_init:
    image: ${TANGO_SHELL_IMAGE}
    container_name: ${TANGO_INSTANCE_NAME}_service_init
    user: ${TANGO_USER_ID:-0}:${TANGO_GROUP_ID:-0}
    depends_on:
      - volume_init
    volumes:
      - data:/data
    env_file:
      - ${GENERATED_ENV_FILE_FOR_COMPOSE}
    networks:
      - default
    command: >
      bash -c "echo Hello from service_init."
      
#      bash -c "for f in /pool/tango/scripts_init/*; do [ -f \"$${f}\" ] && $${f}; done &&
#      [ ! \"${TANGO_NOT_IN_ANY_CTX}\" = "1" ] && for f in /pool/${TANGO_CTX_NAME}/scripts_init/*; do [ -f \"$${f}\" ] && $${f}; done
#      "

  # info on services
  service_info:
    image: ${TANGO_SHELL_IMAGE}
    container_name: ${TANGO_INSTANCE_NAME}_service_info
    user: ${TANGO_USER_ID:-0}:${TANGO_GROUP_ID:-0}
    env_file:
      - ${GENERATED_ENV_FILE_FOR_COMPOSE}
    networks:
      - default
    command: >
      bash -c "for f in /pool/tango/scripts_info/*; do [ -f \"$${f}\" ] && $${f}; done &&
      [ ! \"${TANGO_NOT_IN_ANY_CTX}\" = "1" ] && for f in /pool/${TANGO_CTX_NAME}/scripts_info/*; do [ -f \"$${f}\" ] && $${f}; done
      "


  # Launch all vpn
  vpn:
    image: ${TANGO_SHELL_IMAGE}
    container_name: ${TANGO_INSTANCE_NAME}_vpn
    user: ${TANGO_USER_ID:-0}:${TANGO_GROUP_ID:-0}
    depends_on:
      - service_init
    networks:
      - default
    command: >
      bash -c "echo Launching VPN client connections if any."


  # Router
  # traefik launch order do not matter. It can be launched before or after all other services
  # ENTRYPOINT entry_admin_tcp
  #     http://traefik.domain:${NETWORK_PORT_ADMIN}           => go to dashboard 
  #     http://traefik.domain:${NETWORK_PORT_ADMIN}/api
  #     http://traefik.domain:${NETWORK_PORT_ADMIN}/dashboard => go to dashboard
  traefik:
    image: traefik:${TRAEFIK_VERSION:-latest}
    container_name: ${TANGO_INSTANCE_NAME}_traefik
    depends_on: 
      - service_init
      - error
    restart: unless-stopped
    volumes:
      #- ./traefik-conf.yml:/etc/traefik/traefik.yml
      - letsencrypt:/letsencrypt
      - traefikconfig:/traefikconfig
      - traefiklog:/traefiklog
    labels:
      - "${TANGO_INSTANCE_NAME}.managed=true"
      - "traefik.enable=true"
      # http://traefik.domain:${NETWORK_PORT_ADMIN} http://traefik.domain:${NETWORK_PORT_ADMIN}/api http://traefik.domain:${NETWORK_PORT_ADMIN}/dashboard
      - "traefik.http.routers.traefik_api.entrypoints=${TRAEFIK_ENTRYPOINTS:-entry_main_http}"
      # With traefik dashboard enabled, the router rule must catch requests for both /api and /dashboard
      #- "traefik.http.routers.traefik_api.rule=HostRegexp(`{domain:${TRAEFIK_SUBDOMAIN:-}${TANGO_DOMAIN:-.*}}`) && (PathPrefix(`/dashboard`) || PathPrefix(`/api`) || PathPrefix(`/`))"
      - "traefik.http.routers.traefik_api.rule=HostRegexp(`${TRAEFIK_SUBDOMAIN:-}${TANGO_DOMAIN:-.*}`) && (PathPrefix(`/dashboard`) || PathPrefix(`/api`) || PathPrefix(`/`))"
      - "traefik.http.routers.traefik_api.service=api@internal"
      - "traefik.http.routers.traefik_api.priority=${TRAEFIK_API_PRIORITY}"
      - "traefik.http.routers.traefik_api.middlewares=traefik_api-redirect,traefik_api-redirect2,error-middleware"

      - "traefik.http.routers.traefik_api-secure.entrypoints=${TRAEFIK_ENTRYPOINTS_SECURE:-entry_main_http_secure}"
      #- "traefik.http.routers.traefik_api-secure.rule=HostRegexp(`{domain:${TRAEFIK_SUBDOMAIN:-}${TANGO_DOMAIN:-.*}}`) && (PathPrefix(`/dashboard`) || PathPrefix(`/api`) || PathPrefix(`/`))"
      - "traefik.http.routers.traefik_api-secure.rule=HostRegexp(`${TRAEFIK_SUBDOMAIN:-}${TANGO_DOMAIN:-.*}`) && (PathPrefix(`/dashboard`) || PathPrefix(`/api`) || PathPrefix(`/`))"
      - "traefik.http.routers.traefik_api-secure.service=api@internal"
      - "traefik.http.routers.traefik_api-secure.priority=${TRAEFIK_API_PRIORITY}"
      - "traefik.http.routers.traefik_api-secure.middlewares=traefik_api-redirect,traefik_api-redirect2,error-middleware"
      - "traefik.http.routers.traefik_api-secure.tls=true"
      - "traefik.http.routers.traefik_api-secure.tls.domains[0].main=${TRAEFIK_SUBDOMAIN:-}${TANGO_DOMAIN:-.*}"

      - "traefik.http.routers.traefik_api_rest.entrypoints=${TRAEFIK_ENTRYPOINTS:-entry_main_http}"      
      #- "traefik.http.routers.traefik_api_rest.rule=HostRegexp(`{domain:${TRAEFIK_SUBDOMAIN:-}${TANGO_DOMAIN:-.*}}`) && PathPrefix(`/api/providers/rest`)"
      - "traefik.http.routers.traefik_api_rest.rule=HostRegexp(`${TRAEFIK_SUBDOMAIN:-}${TANGO_DOMAIN:-.*}`) && PathPrefix(`/api/providers/rest`)"
      - "traefik.http.routers.traefik_api_rest.service=rest@internal"
      - "traefik.http.routers.traefik_api_rest.priority=${TRAEFIK_API_REST_PRIORITY}"
      - "traefik.http.routers.traefik_api_rest.middlewares=traefik_api_rest-auth,error-middleware"
      
      - "traefik.http.routers.traefik_api_rest-secure.entrypoints=${TRAEFIK_ENTRYPOINTS_SECURE:-entry_main_http_secure}"
      #- "traefik.http.routers.traefik_api_rest-secure.rule=HostRegexp(`{domain:${TRAEFIK_SUBDOMAIN:-}${TANGO_DOMAIN:-.*}}`) && PathPrefix(`/api/providers/rest`)"
      - "traefik.http.routers.traefik_api_rest-secure.rule=HostRegexp(`${TRAEFIK_SUBDOMAIN:-}${TANGO_DOMAIN:-.*}`) && PathPrefix(`/api/providers/rest`)"
      - "traefik.http.routers.traefik_api_rest-secure.service=rest@internal"
      - "traefik.http.routers.traefik_api_rest-secure.priority=${TRAEFIK_API_REST_PRIORITY}"
      - "traefik.http.routers.traefik_api_rest-secure.middlewares=traefik_api_rest-auth,error-middleware"
      - "traefik.http.routers.traefik_api_rest-secure.tls=true"
      - "traefik.http.routers.traefik_api_rest-secure.tls.domains[0].main=${TRAEFIK_SUBDOMAIN:-}${TANGO_DOMAIN:-.*}"

      # redirect /dashboard to /dashboard/
      - "traefik.http.middlewares.traefik_api-redirect.redirectregex.regex=^(http[s]?://[^:/]+(:[0-9]+)?)/dashboard$$"
      - "traefik.http.middlewares.traefik_api-redirect.redirectregex.replacement=$${1}/dashboard/"
      # redirect / to /dashboard/
      - "traefik.http.middlewares.traefik_api-redirect2.redirectregex.regex=^(http[s]?://[^:/]+(:[0-9]+)?)(/)+$$"
      - "traefik.http.middlewares.traefik_api-redirect2.redirectregex.replacement=$${1}/dashboard/"

      # usefull to get support of secured websocket
      - "traefik.http.middlewares.forwarded-proto-header.headers.customrequestheaders.X-Forwarded-Proto=https"
      # Auth middleware
      - 'traefik.http.middlewares.traefik_api_rest-auth.basicauth.users=${TRAEFIK_API_USER}:${TRAEFIK_API_HASH_PASSWORD}'
      # Security middleware
      # - "traefik.http.middlewares.security.headers.accesscontrolallowmethods=GET,OPTIONS,PUT"
      # - "traefik.http.middlewares.security.headers.accesscontrolalloworiginlist=origin-list-or-null"
      # - "traefik.http.middlewares.security.headers.accesscontrolmaxage=100"
      # - "traefik.http.middlewares.security.headers.addvaryheader=true"
      # - "traefik.http.middlewares.security.headers.browserXssFilter=true"
      # - "traefik.http.middlewares.security.headers.contentTypeNosniff=true"
      # - "traefik.http.middlewares.security.headers.frameDeny=true"
      # - "traefik.http.middlewares.security.headers.customFrameOptionsValue=SAMEORIGIN"
      # - "traefik.http.middlewares.security.headers.referrerPolicy=same-origin"
      # - 'traefik.http.middlewares.security.headers.featurePolicy=vibrate "self"'
      # - "traefik.http.middlewares.security.headers.stsIncludeSubdomains=true"
      # - "traefik.http.middlewares.security.headers.stsPreload=true"
      # - "traefik.http.middlewares.security.headers.stsSeconds=315360000"
    networks:
      - default
    command:
      # https://docs.traefik.io/reference/static-configuration/cli/
      # by default log to stdout
      - "--log=true"
      - "--log.level=${TRAEFIK_LOG_LEVEL}"
      # by default accesslog to stdout
      - "--accesslog=true"
      - "--api=true"
      - "--api.dashboard=true"
      - "--api.debug=false"
      - "--api.insecure=false"
      - "--global.sendAnonymousUsage=false"
      - "--providers.rest=true"
      - "--providers.rest.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.endpoint=${DOCKER_ENGINE_ENDPOINT}"
      - "--providers.docker.constraints=Label(`${TANGO_INSTANCE_NAME}.managed`,`true`)"
      # traefik will route network trafic to managed containers using this network if there is multiple network available to reach managed containers
      - "--providers.docker.network=${TANGO_CTX_NETWORK_NAME}"
      # If set to false, containers that do not have a traefik.enable=true label are ignored
      - "--providers.docker.exposedByDefault=false"
      - "--providers.file.directory=/traefikconfig"
      - "--certificatesresolvers.tango=true"
      - "--certificatesresolvers.tango.acme.email=${LETS_ENCRYPT_MAIL}"
      - "--certificatesresolvers.tango.acme.storage=/letsencrypt/acme.json"
      #- "--core.defaultRuleSyntax=v2"

  # Traefik custom error pages : https://imandrea.me/blog/traefik-custom-404/
  # Custom error pages : https://github.com/tarampampam/error-pages
  error:
    image: tarampampam/error-pages:3.3.3
    container_name: ${TANGO_INSTANCE_NAME}_error
    restart: unless-stopped
    depends_on: 
      - service_init
    environment:
      # https://github.com/tarampampam/error-pages/tree/gh-pages
      TEMPLATE_NAME: ${TANGO_TEMPLATE_ERROR:-ghost}
    labels:
      - "${TANGO_INSTANCE_NAME}.managed=true"
      - "traefik.enable=true"
      - "traefik.http.services.error.loadbalancer.server.port=8080"

      - "traefik.http.middlewares.error-middleware.errors.status=400-599"
      - "traefik.http.middlewares.error-middleware.errors.service=error"
      - 'traefik.http.middlewares.error-middleware.errors.query=/{status}.html'

      # use as "fallback" for any request non matching any router (with priority below normal)
      # catch unresolved "unknown.domain.com" HTTP request on all entrypoints
      - "traefik.http.routers.error.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.error.priority=${ERROR_PRIORITY}"
      - "traefik.http.routers.error.entrypoints=${TRAEFIK_ENTRYPOINTS_HTTP_LIST}"
      - "traefik.http.routers.error.middlewares=error-middleware"
      # catch unresolved "unknown.domain.com" HTTPS request on all entrypoints
      - "traefik.http.routers.error-secure.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.error-secure.priority=${ERROR_PRIORITY}"
      - "traefik.http.routers.error-secure.entrypoints=${TRAEFIK_ENTRYPOINTS_HTTP_LIST}"
      - "traefik.http.routers.error-secure.middlewares=error-middleware"
      - "traefik.http.routers.error-secure.tls=true"
      - "traefik.http.routers.error-secure.tls.domains[0].main=*.${TANGO_DOMAIN:-.*}"
      
    networks:
      - default
    expose:
      - 8080
